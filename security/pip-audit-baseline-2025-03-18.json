{
  "dependencies": [
    { "name": "fastapi", "version": "0.115.2", "vulns": [] },
    { "name": "pydantic", "version": "2.9.2", "vulns": [] },
    { "name": "uvicorn", "version": "0.30.6", "vulns": [] },
    { "name": "pydantic-settings", "version": "2.5.2", "vulns": [] },
    {
      "name": "python-multipart",
      "version": "0.0.9",
      "vulns": [
        {
          "id": "GHSA-59g5-xgcq-4qw3",
          "fix_versions": ["0.0.18"],
          "aliases": ["CVE-2024-53981"],
          "description": "### Summary  When parsing form data, `python-multipart` skips line breaks (CR `\\r` or LF `\\n`) in front of the first boundary and any tailing bytes after the last boundary. This happens one byte at a time and emits a log event each time, which may cause excessive logging for certain inputs.  An attacker could abuse this by sending a malicious request with lots of data before the first or after the last boundary, causing high CPU load and stalling the processing thread for a significant amount of time. In case of ASGI application, this could stall the event loop and prevent other requests from being processed, resulting in a denial of service (DoS).  ### Impact  Applications that use `python-multipart` to parse form data (or use frameworks that do so) are affected.   ### Original Report  This security issue was reported by: - GitHub security advisory in Starlette on October 30 by @Startr4ck - Email to `python-multipart` maintainer on October 3 by @mnqazi"
        }
      ]
    },
    { "name": "sqlalchemy", "version": "2.0.36", "vulns": [] },
    { "name": "psycopg", "version": "3.2.3", "vulns": [] },
    { "name": "alembic", "version": "1.13.2", "vulns": [] },
    { "name": "passlib", "version": "1.7.4", "vulns": [] },
    { "name": "bcrypt", "version": "4.0.1", "vulns": [] },
    { "name": "pyjwt", "version": "2.9.0", "vulns": [] },
    { "name": "httpx", "version": "0.27.2", "vulns": [] },
    {
      "name": "aiohttp",
      "version": "3.10.11",
      "vulns": [
        {
          "id": "GHSA-9548-qrrj-x5pj",
          "fix_versions": ["3.12.14"],
          "aliases": ["CVE-2025-53643"],
          "description": "### Summary The Python parser is vulnerable to a request smuggling vulnerability due to not parsing trailer sections of an HTTP request.  ### Impact If a pure Python version of aiohttp is installed (i.e. without the usual C extensions) or AIOHTTP_NO_EXTENSIONS is enabled, then an attacker may be able to execute a request smuggling attack to bypass certain firewalls or proxy protections.  ----  Patch: https://github.com/aio-libs/aiohttp/commit/e8d774f635dc6d1cd3174d0e38891da5de0e2b6a"
        }
      ]
    },
    { "name": "tenacity", "version": "9.0.0", "vulns": [] },
    { "name": "geoalchemy2", "version": "0.14.7", "vulns": [] },
    { "name": "shapely", "version": "2.0.5", "vulns": [] },
    {
      "name": "python-socketio",
      "version": "5.11.4",
      "vulns": [
        {
          "id": "GHSA-g8c6-8fjj-2r4m",
          "fix_versions": ["5.14.0"],
          "aliases": ["CVE-2025-61765"],
          "description": "### Summary A remote code execution vulnerability in python-socketio versions prior to 5.14.0 allows attackers to execute arbitrary Python code through malicious pickle deserialization in multi-server deployments on which the attacker previously gained access to the message queue that the servers use for internal communications.  ### Details When Socket.IO servers are configured to use a message queue backend such as Redis for inter-server communication, messages sent between the servers are encoded using the `pickle` Python module. When a server receives one of these messages through the message queue, it assumes it is trusted and immediately deserializes it.  The vulnerability stems from deserialization of messages using Python's `pickle.loads()` function. Having previously obtained access to the message queue, the attacker can send a python-socketio server a crafted pickle payload that executes arbitrary code during deserialization via Python's `__reduce__` method.  ### Impact This vulnerability only affects deployments with a compromised message queue. The attack can lead to the attacker executing random code in the context of, and with the privileges of a Socket.IO server process.   Single-server systems that do not use a message queue, and multi-server systems with a secure message queue are not vulnerable.  ### Remediation In addition to making sure standard security practices are followed in the deployment of the message queue, users of the python-socketio package can upgrade to version 5.14.0 or newer, which remove the `pickle` module and use the much safer JSON encoding for inter-server messaging."
        }
      ]
    },
    { "name": "pytest", "version": "8.3.3", "vulns": [] },
    { "name": "reportlab", "version": "4.2.2", "vulns": [] },
    { "name": "opentelemetry-api", "version": "1.25.0", "vulns": [] },
    { "name": "opentelemetry-sdk", "version": "1.25.0", "vulns": [] },
    { "name": "opentelemetry-exporter-otlp-proto-http", "version": "1.25.0", "vulns": [] },
    { "name": "opentelemetry-instrumentation-fastapi", "version": "0.46b0", "vulns": [] },
    { "name": "email-validator", "version": "2.1.0", "vulns": [] },
    { "name": "opentelemetry-exporter-otlp-proto-common", "version": "1.25.0", "vulns": [] },
    { "name": "opentelemetry-instrumentation", "version": "0.46b0", "vulns": [] },
    { "name": "opentelemetry-instrumentation-asgi", "version": "0.46b0", "vulns": [] },
    { "name": "opentelemetry-proto", "version": "1.25.0", "vulns": [] },
    { "name": "opentelemetry-semantic-conventions", "version": "0.46b0", "vulns": [] },
    { "name": "opentelemetry-util-http", "version": "0.46b0", "vulns": [] },
    { "name": "psycopg-binary", "version": "3.2.3", "vulns": [] },
    { "name": "pydantic-core", "version": "2.23.4", "vulns": [] },
    { "name": "asgiref", "version": "3.10.0", "vulns": [] },
    { "name": "googleapis-common-protos", "version": "1.71.0", "vulns": [] },
    { "name": "httpcore", "version": "1.0.9", "vulns": [] },
    { "name": "importlib-metadata", "version": "7.1.0", "vulns": [] },
    { "name": "multidict", "version": "6.7.0", "vulns": [] },
    { "name": "numpy", "version": "2.3.4", "vulns": [] },
    { "name": "pluggy", "version": "1.6.0", "vulns": [] },
    { "name": "protobuf", "version": "4.25.8", "vulns": [] },
    { "name": "requests", "version": "2.32.5", "vulns": [] },
    { "name": "charset-normalizer", "version": "3.4.4", "vulns": [] },
    { "name": "idna", "version": "3.11", "vulns": [] },
    {
      "name": "starlette",
      "version": "0.40.0",
      "vulns": [
        {
          "id": "GHSA-2c2j-9gv5-cj73",
          "fix_versions": ["0.47.2"],
          "aliases": ["CVE-2025-54121"],
          "description": "### Summary When parsing a multi-part form with large files (greater than the [default max spool size](https://github.com/encode/starlette/blob/fa5355442753f794965ae1af0f87f9fec1b9a3de/starlette/formparsers.py#L126)) `starlette` will block the main thread to roll the file over to disk. This blocks the event thread which means we can't accept new connections.  ### Details Please see this discussion for details: https://github.com/encode/starlette/discussions/2927#discussioncomment-13721403. In summary the following UploadFile code (copied from [here](https://github.com/encode/starlette/blob/fa5355442753f794965ae1af0f87f9fec1b9a3de/starlette/datastructures.py#L436C5-L447C14)) has a minor bug. Instead of just checking for `self._in_memory` we should also check if the additional bytes will cause a rollover.  ```python      @property     def _in_memory(self) -> bool:         # check for SpooledTemporaryFile._rolled         rolled_to_disk = getattr(self.file, \"_rolled\", True)         return not rolled_to_disk      async def write(self, data: bytes) -> None:         if self.size is not None:             self.size += len(data)          if self._in_memory:             self.file.write(data)         else:             await run_in_threadpool(self.file.write, data) ```  I have already created a PR which fixes the problem: https://github.com/encode/starlette/pull/2962   ### PoC See the discussion [here](https://github.com/encode/starlette/discussions/2927#discussioncomment-13721403) for steps on how to reproduce.  ### Impact To be honest, very low and not many users will be impacted. Parsing large forms is already CPU intensive so the additional IO block doesn't slow down `starlette` that much on systems with modern HDDs/SSDs. If someone is running on tape they might see a greater impact."
        }
      ]
    },
    { "name": "anyio", "version": "4.11.0", "vulns": [] },
    { "name": "urllib3", "version": "2.5.0", "vulns": [] },
    { "name": "wrapt", "version": "1.17.3", "vulns": [] },
    { "name": "yarl", "version": "1.22.0", "vulns": [] },
    { "name": "aiohappyeyeballs", "version": "2.6.1", "vulns": [] },
    { "name": "aiosignal", "version": "1.4.0", "vulns": [] },
    { "name": "annotated-types", "version": "0.7.0", "vulns": [] },
    { "name": "attrs", "version": "25.4.0", "vulns": [] },
    { "name": "bidict", "version": "0.23.1", "vulns": [] },
    { "name": "certifi", "version": "2025.10.5", "vulns": [] },
    { "name": "click", "version": "8.3.0", "vulns": [] },
    { "name": "deprecated", "version": "1.2.18", "vulns": [] },
    { "name": "dnspython", "version": "2.8.0", "vulns": [] },
    { "name": "frozenlist", "version": "1.8.0", "vulns": [] },
    { "name": "greenlet", "version": "3.2.4", "vulns": [] },
    { "name": "h11", "version": "0.16.0", "vulns": [] },
    { "name": "httptools", "version": "0.7.1", "vulns": [] },
    { "name": "pillow", "version": "12.0.0", "vulns": [] },
    { "name": "propcache", "version": "0.4.1", "vulns": [] },
    { "name": "python-dotenv", "version": "1.2.1", "vulns": [] },
    { "name": "python-engineio", "version": "4.12.3", "vulns": [] },
    { "name": "pyyaml", "version": "6.0.3", "vulns": [] },
    { "name": "simple-websocket", "version": "1.1.0", "vulns": [] },
    { "name": "sniffio", "version": "1.3.1", "vulns": [] },
    { "name": "typing-extensions", "version": "4.15.0", "vulns": [] },
    { "name": "uvloop", "version": "0.22.1", "vulns": [] },
    { "name": "watchfiles", "version": "1.1.1", "vulns": [] },
    { "name": "websockets", "version": "15.0.1", "vulns": [] },
    { "name": "zipp", "version": "3.23.0", "vulns": [] },
    { "name": "chardet", "version": "5.2.0", "vulns": [] },
    { "name": "iniconfig", "version": "2.3.0", "vulns": [] },
    { "name": "mako", "version": "1.3.10", "vulns": [] },
    { "name": "markupsafe", "version": "3.0.3", "vulns": [] },
    { "name": "packaging", "version": "25.0", "vulns": [] },
    { "name": "psycopg-pool", "version": "3.2.7", "vulns": [] },
    { "name": "wsproto", "version": "1.2.0", "vulns": [] }
  ],
  "fixes": []
}
