version: '3.8'

# RentGuy Enterprise Platform - Multi-tenant Production Deployment
# Port: 8721 (Traefik entrypoint)
# Database: rentguy_production (isolated schema)
# Secrets: OpenBao integration
# Auth: Keycloak integration

services:
  # Frontend Service (React/Vite)
  rentguy-frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
      args:
        - NODE_VERSION=${NODE_VERSION:-20.17.1}
    image: rentguy-frontend:${VERSION:-latest}
    container_name: rentguy-frontend-prod
    restart: unless-stopped
    environment:
      - VITE_API_URL=https://${DOMAIN:-rentguy.sevensa.nl}/api
      - VITE_KEYCLOAK_URL=${KEYCLOAK_URL}
      - VITE_KEYCLOAK_REALM=${KEYCLOAK_REALM:-rentguy}
      - VITE_KEYCLOAK_CLIENT_ID=${KEYCLOAK_CLIENT_ID:-rentguy-app}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.rentguy-frontend.rule=Host(`sevensa.rentguy.nl`) || Host(`mr-dj.rentguy.nl`) || Host(`www.rentguy.nl`) || Host(`rentguy.nl`)"
      - "traefik.http.routers.rentguy-frontend.entrypoints=websecure"
      - "traefik.http.routers.rentguy-frontend.tls=true"
      - "traefik.http.routers.rentguy-frontend.tls.certresolver=letsencrypt"
      - "traefik.http.services.rentguy-frontend.loadbalancer.server.port=80"
      - "traefik.http.middlewares.rentguy-compress.compress=true"
      - "traefik.http.routers.rentguy-frontend.middlewares=rentguy-compress"
    networks:
      - sevensa-edge
      - rentguy-internal
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://127.0.0.1:80/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Backend Service (FastAPI)
  rentguy-backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        - ENVIRONMENT=production
    image: rentguy-backend:${VERSION:-latest}
    container_name: rentguy-backend-prod
    restart: unless-stopped
    environment:
      # Database
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@rentguy-db:5432/${POSTGRES_DB}
      - DB_POOL_SIZE=20
      - DB_MAX_OVERFLOW=10
      
      # Redis (for caching and sessions)
      - REDIS_URL=redis://rentguy-redis:6379/0
      
      # JWT & Security
      - JWT_SECRET=${JWT_SECRET}
      - JWT_ALGORITHM=HS256
      - JWT_EXPIRATION_MINUTES=60
      - REFRESH_TOKEN_EXPIRATION_DAYS=7
      
      # Keycloak Integration
      # Keycloak Integration (Temporarily Disabled)
      - KEYCLOAK_SERVER_URL=disabled
      - KEYCLOAK_REALM=disabled
      - KEYCLOAK_CLIENT_ID=disabled
      - KEYCLOAK_CLIENT_SECRET=disabled
      
      # OpenBao Integration
      - OPENBAO_ADDR=${OPENBAO_ADDR}
      - OPENBAO_TOKEN=${OPENBAO_TOKEN}
      - OPENBAO_NAMESPACE=${OPENBAO_NAMESPACE:-rentguy}
      
      # Email (for notifications)
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT:-587}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - EMAIL_FROM=${EMAIL_FROM:-noreply@rentguy.nl}
      
      # Customer Portal
      - CUSTOMER_PORTAL_BASE_URL=https://${DOMAIN:-rentguy.sevensa.nl}/portal
      
      # Recurring Invoices
      - INVOICE_SCHEDULER_ENABLED=true
      - INVOICE_EMAIL_FROM=invoices@rentguy.nl
      
      # Online Booking
      - BOOKING_THEMES_ENABLED=true
      - BOOKING_PAYMENT_PROVIDER=mollie
      - MOLLIE_API_KEY=${MOLLIE_API_KEY}
      
      # Sub-Renting
      - SUBRENTING_API_KEY=${SUBRENTING_API_KEY}
      - SUBRENTING_WEBHOOK_SECRET=${SUBRENTING_WEBHOOK_SECRET}
      
      # Monitoring
      - SENTRY_DSN=${SENTRY_DSN}
      - LOG_LEVEL=INFO
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.rentguy-backend.rule=(Host(`sevensa.rentguy.nl`) || Host(`mr-dj.rentguy.nl`) || Host(`www.rentguy.nl`) || Host(`rentguy.nl`)) && PathPrefix(`/api`)"
      - "traefik.http.routers.rentguy-backend.entrypoints=websecure"
      - "traefik.http.routers.rentguy-backend.tls=true"
      - "traefik.http.routers.rentguy-backend.tls.certresolver=letsencrypt"
      - "traefik.http.services.rentguy-backend.loadbalancer.server.port=8000"
      - "traefik.http.middlewares.rentguy-stripprefix.stripprefix.prefixes=/api"
      - "traefik.http.routers.rentguy-backend.middlewares=rentguy-stripprefix"
    networks:
      - sevensa-edge
      - rentguy-internal
    depends_on:
      rentguy-db:
        condition: service_healthy
      rentguy-redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8000/readyz').read()"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Celery Worker Service (Background Tasks)
  rentguy-celery-worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        - ENVIRONMENT=production
    image: rentguy-backend:${VERSION:-latest}
    container_name: rentguy-celery-worker-prod
    restart: unless-stopped
    command: celery -A app.automation.celery_app worker --loglevel=info --queues=crm,email --concurrency=4
    environment:
      # Database
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@rentguy-db:5432/${POSTGRES_DB}

      # JWT & Security
      - JWT_SECRET=${JWT_SECRET}

      # Celery
      - CELERY_BROKER_URL=redis://rentguy-redis:6379/0
      - CELERY_RESULT_BACKEND=redis://rentguy-redis:6379/0

      # Email (for automation workflows)
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT:-587}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - EMAIL_FROM=${EMAIL_FROM:-noreply@mr-dj.nl}

      # Monitoring
      - SENTRY_DSN=${SENTRY_DSN}
      - LOG_LEVEL=INFO
    networks:
      - rentguy-internal
    depends_on:
      rentguy-db:
        condition: service_healthy
      rentguy-redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "celery -A app.automation.celery_app inspect ping -d celery@$$HOSTNAME"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Celery Beat Service (Periodic Tasks Scheduler)
  rentguy-celery-beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        - ENVIRONMENT=production
    image: rentguy-backend:${VERSION:-latest}
    container_name: rentguy-celery-beat-prod
    restart: unless-stopped
    command: celery -A app.automation.celery_app beat --loglevel=info
    environment:
      # Database
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@rentguy-db:5432/${POSTGRES_DB}

      # JWT & Security
      - JWT_SECRET=${JWT_SECRET}

      # Celery
      - CELERY_BROKER_URL=redis://rentguy-redis:6379/0
      - CELERY_RESULT_BACKEND=redis://rentguy-redis:6379/0

      # Monitoring
      - LOG_LEVEL=INFO
    networks:
      - rentguy-internal
    depends_on:
      rentguy-db:
        condition: service_healthy
      rentguy-redis:
        condition: service_healthy

  # Database Service (PostgreSQL with PostGIS)
  rentguy-db:
    image: postgis/postgis:16-3.4
    container_name: rentguy-db-prod
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-rentguy_production}
      - POSTGRES_USER=${POSTGRES_USER:-rentguy}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - rentguy-db-data:/var/lib/postgresql/data
      - ./backend/alembic/init_postgis.sql:/docker-entrypoint-initdb.d/01_init_postgis.sql:ro
    networks:
      - rentguy-internal
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-rentguy} -d ${POSTGRES_DB:-rentguy_production}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    command: 
      - "postgres"
      - "-c"
      - "max_connections=200"
      - "-c"
      - "shared_buffers=256MB"
      - "-c"
      - "effective_cache_size=1GB"
      - "-c"
      - "maintenance_work_mem=64MB"
      - "-c"
      - "checkpoint_completion_target=0.9"
      - "-c"
      - "wal_buffers=16MB"
      - "-c"
      - "default_statistics_target=100"
      - "-c"
      - "random_page_cost=1.1"
      - "-c"
      - "effective_io_concurrency=200"
      - "-c"
      - "work_mem=1310kB"
      - "-c"
      - "min_wal_size=1GB"
      - "-c"
      - "max_wal_size=4GB"

  # Redis Service (Caching & Sessions)
  rentguy-redis:
    image: redis:7-alpine
    container_name: rentguy-redis-prod
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD} --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - rentguy-redis-data:/data
    networks:
      - rentguy-internal
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Migration Service (Run once on deployment)
  rentguy-migrations:
    build:
      context: ./backend
      dockerfile: Dockerfile
    image: rentguy-backend:${VERSION:-latest}
    container_name: rentguy-migrations
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@rentguy-db:5432/${POSTGRES_DB}
    command: alembic upgrade head
    networks:
      - rentguy-internal
    depends_on:
      rentguy-db:
        condition: service_healthy
    restart: "no"

  # Backup Service (Daily backups)
  # Backup Service (Daily backups)
  rentguy-backup:
    image: prodrigestivill/postgres-backup-local:16
    container_name: rentguy-backup
    restart: unless-stopped
    environment:
      - POSTGRES_HOST=rentguy-db
      - POSTGRES_DB=${POSTGRES_DB:-rentguy_production}
      - POSTGRES_USER=${POSTGRES_USER:-rentguy}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - SCHEDULE=@daily
      - BACKUP_KEEP_DAYS=30
      - BACKUP_KEEP_WEEKS=8
      - BACKUP_KEEP_MONTHS=12
      - HEALTHCHECK_PORT=8080
    volumes:
      - /root/backups/rentguy:/backups
    networks:
      - rentguy-internal
    depends_on:
      - rentguy-db

volumes:
  rentguy-db-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /root/rentguy/data/postgres
  
  rentguy-redis-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /root/rentguy/data/redis

networks:
  sevensa-edge:
    external: true

  rentguy-internal:
    driver: bridge
    internal: false
    ipam:
      config:
        - subnet: 172.28.0.0/24

