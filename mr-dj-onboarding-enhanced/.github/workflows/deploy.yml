name: Mr. DJ Onboarding - CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'mr-dj-onboarding-enhanced/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'mr-dj-onboarding-enhanced/**'

env:
  NODE_VERSION: '18'
  DOCKER_IMAGE: rentguy/mr-dj-onboarding

jobs:
  test:
    name: Test & Quality Checks
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./mr-dj-onboarding-enhanced
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: './mr-dj-onboarding-enhanced/package-lock.json'

    - name: Install dependencies
      run: npm ci --legacy-peer-deps

    - name: Run linting
      run: npm run lint

    - name: Run type checking
      run: npm run type-check
      continue-on-error: true

    - name: Run unit tests
      run: npm run test:unit
      continue-on-error: true

    - name: Run build
      run: npm run build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-files
        path: ./mr-dj-onboarding-enhanced/dist/
        retention-days: 7

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./mr-dj-onboarding-enhanced
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install dependencies
      run: npm ci --legacy-peer-deps

    - name: Run npm audit
      run: npm audit --audit-level=high
      continue-on-error: true

    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high
        command: test
      continue-on-error: true

  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_IMAGE }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./mr-dj-onboarding-enhanced
        file: ./mr-dj-onboarding-enhanced/Dockerfile.prod
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to staging server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.STAGING_HOST }}
        username: ${{ secrets.STAGING_USER }}
        key: ${{ secrets.STAGING_SSH_KEY }}
        script: |
          cd /opt/rentguy/mr-dj-onboarding
          git pull origin main
          ./deployment/deploy.sh latest staging staging.onboarding.mr-dj.nl

    - name: Run staging health check
      run: |
        sleep 30
        curl -f https://staging.onboarding.mr-dj.nl/health || exit 1

    - name: Notify deployment status
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      if: always()

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to production server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USER }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        script: |
          cd /opt/rentguy/mr-dj-onboarding
          git pull origin main
          ./deployment/deploy.sh latest production onboarding.mr-dj.nl

    - name: Run production health check
      run: |
        sleep 30
        curl -f https://onboarding.mr-dj.nl/health || exit 1

    - name: Run smoke tests
      run: |
        # Basic smoke tests
        curl -f https://onboarding.mr-dj.nl/ || exit 1
        curl -f https://onboarding.mr-dj.nl/health || exit 1

    - name: Notify deployment success
      uses: 8398a7/action-slack@v3
      with:
        status: success
        channel: '#deployments'
        text: 'ðŸš€ Mr. DJ Onboarding successfully deployed to production!'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}

    - name: Create release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body: |
          ## Changes in this Release
          - Automated deployment of Mr. DJ Onboarding Module
          - Build: ${{ github.sha }}
          - Environment: Production
          
          ## Health Checks
          - âœ… Application responding
          - âœ… Health endpoint active
          - âœ… Smoke tests passed
        draft: false
        prerelease: false
